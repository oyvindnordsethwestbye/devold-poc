'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);

var Renderers = {
  link: function link(props) {
    var _props$metadata;

    return React__default.createElement("a", {
      href: (_props$metadata = props.metadata) == null ? void 0 : _props$metadata.href
    }, React__default.createElement(NodeContent, Object.assign({}, props)));
  },
  'unordered-list': function unorderedList(props) {
    return React__default.createElement("ul", null, React__default.createElement(NodeContent, Object.assign({}, props)));
  },
  'ordered-list': function orderedList(props) {
    return React__default.createElement("ol", null, React__default.createElement(NodeContent, Object.assign({}, props)));
  },
  list: function list(props) {
    return React__default.createElement("ul", null, React__default.createElement(NodeContent, Object.assign({}, props)));
  },
  'list-item': function listItem(props) {
    return React__default.createElement("li", null, React__default.createElement(NodeContent, Object.assign({}, props)));
  },
  quote: function quote(props) {
    if (props.kind === 'block') {
      return React__default.createElement("blockquote", null, React__default.createElement(NodeContent, Object.assign({}, props)));
    }

    return React__default.createElement("q", null, React__default.createElement(NodeContent, Object.assign({}, props)));
  },
  paragraph: function paragraph(props) {
    return React__default.createElement("p", null, React__default.createElement(NodeContent, Object.assign({}, props)));
  },
  preformatted: function preformatted(props) {
    return React__default.createElement("pre", null, React__default.createElement(NodeContent, Object.assign({}, props)));
  },
  code: function code(props) {
    return React__default.createElement("code", null, React__default.createElement(NodeContent, Object.assign({}, props)));
  },
  underlined: function underlined(props) {
    return React__default.createElement("u", null, React__default.createElement(NodeContent, Object.assign({}, props)));
  },
  strong: function strong(props) {
    return React__default.createElement("strong", null, React__default.createElement(NodeContent, Object.assign({}, props)));
  },
  emphasized: function emphasized(props) {
    return React__default.createElement("em", null, React__default.createElement(NodeContent, Object.assign({}, props)));
  },
  div: function div(props) {
    return React__default.createElement("div", null, React__default.createElement(NodeContent, Object.assign({}, props)));
  },
  span: function span(props) {
    return React__default.createElement(NodeContent, Object.assign({}, props));
  },
  'line-break': function lineBreak() {
    return React__default.createElement("br", null);
  }
};
var OverridesContext = /*#__PURE__*/React.createContext(null);
var NodeContent = function NodeContent(props) {
  var textContent = props.textContent;

  if (textContent) {
    return renderTextContent(textContent);
  }

  if (props.children) {
    return React__default.createElement(React.Fragment, null, props.children.map(function (child, i) {
      return React__default.createElement(ContentTransformerNode, Object.assign({
        key: i
      }, child));
    }));
  }

  return null;
}; // Render text and convert line breaks (\n) to <br />

function renderTextContent(text) {
  var partsBetweenLineBreaks = text.split(/\n/g);

  if (partsBetweenLineBreaks.length === 1) {
    return React__default.createElement(React.Fragment, null, text);
  }

  return React__default.createElement(React.Fragment, null, partsBetweenLineBreaks.map(function (part, index) {
    var key = index.toString();

    if (index === partsBetweenLineBreaks.length - 1) {
      return React__default.createElement(React.Fragment, {
        key: key
      }, "part");
    }

    return React__default.createElement(React.Fragment, {
      key: key
    }, part, React__default.createElement("br", null));
  }));
}
var ContentTransformerNode = function ContentTransformerNode(props) {
  var Renderer = Renderers.span;
  var overrides = React.useContext(OverridesContext);
  var type = props.type,
      kind = props.kind,
      textContent = props.textContent;

  if (type) {
    var t = type;
    var override = overrides == null ? void 0 : overrides[t];
    Renderer = override || Renderers[type];
  }

  if (!Renderer) {
    Renderer = Renderers.span;

    if (type === 'container' && kind === 'block') {
      Renderer = Renderers.div;
    } else if (type === null && textContent) {
      return renderTextContent(textContent);
    }
  }

  return React__default.createElement(Renderer, Object.assign({}, props));
};
var ContentTransformer = function ContentTransformer(_ref) {
  var _ref$overrides = _ref.overrides,
      overrides = _ref$overrides === void 0 ? null : _ref$overrides,
      json = _ref.json;

  if (!json) {
    return null;
  }

  if (Array.isArray(json)) {
    var nodes = json;
    return React__default.createElement(OverridesContext.Provider, {
      value: overrides
    }, nodes.map(function (j, i) {
      return React__default.createElement(ContentTransformerNode, Object.assign({
        key: i
      }, j));
    }));
  }

  var node = json;
  return React__default.createElement(OverridesContext.Provider, {
    value: overrides
  }, React__default.createElement(ContentTransformerNode, Object.assign({}, node)));
};

exports.ContentTransformer = ContentTransformer;
exports.ContentTransformerNode = ContentTransformerNode;
exports.NodeContent = NodeContent;
exports.OverridesContext = OverridesContext;
exports.Renderers = Renderers;
exports.renderTextContent = renderTextContent;
//# sourceMappingURL=react-content-transformer.cjs.development.js.map

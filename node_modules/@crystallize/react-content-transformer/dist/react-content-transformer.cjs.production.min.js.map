{"version":3,"file":"react-content-transformer.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["import React, {\n  Fragment,\n  createContext,\n  useContext,\n  HTMLAttributes,\n} from 'react';\n\nimport { NodeProps, Overrides } from './types';\n\nexport { NodeProps, Overrides };\n\nexport const Renderers = {\n  link: (props: NodeProps) => (\n    <a href={props.metadata?.href}>\n      <NodeContent {...props} />\n    </a>\n  ),\n  'unordered-list': (props: NodeProps) => (\n    <ul>\n      <NodeContent {...props} />\n    </ul>\n  ),\n  'ordered-list': (props: NodeProps) => (\n    <ol>\n      <NodeContent {...props} />\n    </ol>\n  ),\n  list: (props: NodeProps) => (\n    <ul>\n      <NodeContent {...props} />\n    </ul>\n  ),\n  'list-item': (props: NodeProps) => (\n    <li>\n      <NodeContent {...props} />\n    </li>\n  ),\n  quote: (props: NodeProps) => {\n    if (props.kind === 'block') {\n      return (\n        <blockquote>\n          <NodeContent {...props} />\n        </blockquote>\n      );\n    }\n    return (\n      <q>\n        <NodeContent {...props} />\n      </q>\n    );\n  },\n  paragraph: (props: NodeProps) => (\n    <p>\n      <NodeContent {...props} />\n    </p>\n  ),\n  preformatted: (props: NodeProps) => (\n    <pre>\n      <NodeContent {...props} />\n    </pre>\n  ),\n  code: (props: NodeProps) => (\n    <code>\n      <NodeContent {...props} />\n    </code>\n  ),\n  underlined: (props: NodeProps) => (\n    <u>\n      <NodeContent {...props} />\n    </u>\n  ),\n  strong: (props: NodeProps) => (\n    <strong>\n      <NodeContent {...props} />\n    </strong>\n  ),\n  emphasized: (props: NodeProps) => (\n    <em>\n      <NodeContent {...props} />\n    </em>\n  ),\n  div: (props: NodeProps) => (\n    <div>\n      <NodeContent {...props} />\n    </div>\n  ),\n  span: (props: NodeProps) => <NodeContent {...props} />,\n  'line-break': () => <br />,\n};\n\nexport interface Props extends HTMLAttributes<HTMLDivElement> {\n  overrides?: Overrides | null;\n  json?: [NodeProps] | NodeProps;\n}\n\nexport const OverridesContext = createContext<Overrides | null>(null);\n\nexport const NodeContent = (props: NodeProps) => {\n  const { textContent } = props;\n\n  if (textContent) {\n    return renderTextContent(textContent);\n  }\n\n  if (props.children) {\n    return (\n      <Fragment>\n        {props.children.map((child, i) => (\n          <ContentTransformerNode key={i} {...child} />\n        ))}\n      </Fragment>\n    );\n  }\n\n  return null;\n};\n\n// Render text and convert line breaks (\\n) to <br />\nexport function renderTextContent(text: String) {\n  const partsBetweenLineBreaks = text.split(/\\n/g);\n  if (partsBetweenLineBreaks.length === 1) {\n    return <Fragment>{text}</Fragment>;\n  }\n  return (\n    <Fragment>\n      {partsBetweenLineBreaks.map((part: String, index: Number) => {\n        const key = index.toString();\n        if (index === partsBetweenLineBreaks.length - 1) {\n          return <Fragment key={key}>part</Fragment>;\n        }\n        return (\n          <Fragment key={key}>\n            {part}\n            <br />\n          </Fragment>\n        );\n      })}\n    </Fragment>\n  );\n}\n\nexport const ContentTransformerNode = (props: NodeProps): JSX.Element => {\n  let Renderer = Renderers.span;\n  const overrides = useContext(OverridesContext);\n\n  const { type, kind, textContent } = props;\n\n  if (type) {\n    const t = type as keyof typeof Renderers;\n    const override = overrides?.[t] as () => JSX.Element;\n\n    Renderer = override || Renderers[type as keyof typeof Renderers];\n  }\n\n  if (!Renderer) {\n    Renderer = Renderers.span;\n\n    if (type === 'container' && kind === 'block') {\n      Renderer = Renderers.div;\n    } else if (type === null && textContent) {\n      return renderTextContent(textContent);\n    }\n  }\n\n  return <Renderer {...props} />;\n};\n\nexport const ContentTransformer = ({ overrides = null, json }: Props) => {\n  if (!json) {\n    return null;\n  }\n\n  if (Array.isArray(json)) {\n    const nodes: [NodeProps] = json;\n    return (\n      <OverridesContext.Provider value={overrides}>\n        {nodes.map((j, i) => (\n          <ContentTransformerNode key={i} {...j} />\n        ))}\n      </OverridesContext.Provider>\n    );\n  }\n\n  const node: NodeProps = json;\n\n  return (\n    <OverridesContext.Provider value={overrides}>\n      <ContentTransformerNode {...node} />\n    </OverridesContext.Provider>\n  );\n};\n"],"names":["Renderers","link","props","React","href","metadata","_props$metadata","NodeContent","list","quote","kind","paragraph","preformatted","code","underlined","strong","emphasized","div","span","OverridesContext","createContext","textContent","renderTextContent","children","Fragment","map","child","i","ContentTransformerNode","key","text","partsBetweenLineBreaks","split","length","part","index","toString","Renderer","overrides","useContext","type","json","Array","isArray","Provider","value","j"],"mappings":"oJAWaA,EAAY,CACvBC,KAAM,SAACC,gBACLC,qBAAGC,cAAMF,EAAMG,iBAANC,EAAgBF,MACvBD,gBAACI,mBAAgBL,uBAGH,SAACA,UACjBC,0BACEA,gBAACI,mBAAgBL,qBAGL,SAACA,UACfC,0BACEA,gBAACI,mBAAgBL,MAGrBM,KAAM,SAACN,UACLC,0BACEA,gBAACI,mBAAgBL,kBAGR,SAACA,UACZC,0BACEA,gBAACI,mBAAgBL,MAGrBO,MAAO,SAACP,UAGFC,gBAFe,UAAfD,EAAMQ,2BAGJP,gBAACI,mBAAgBL,MAUzBS,UAAW,SAACT,UACVC,yBACEA,gBAACI,mBAAgBL,MAGrBU,aAAc,SAACV,UACbC,2BACEA,gBAACI,mBAAgBL,MAGrBW,KAAM,SAACX,UACLC,4BACEA,gBAACI,mBAAgBL,MAGrBY,WAAY,SAACZ,UACXC,yBACEA,gBAACI,mBAAgBL,MAGrBa,OAAQ,SAACb,UACPC,8BACEA,gBAACI,mBAAgBL,MAGrBc,WAAY,SAACd,UACXC,0BACEA,gBAACI,mBAAgBL,MAGrBe,IAAK,SAACf,UACJC,2BACEA,gBAACI,mBAAgBL,MAGrBgB,KAAM,SAAChB,UAAqBC,gBAACI,mBAAgBL,kBAC/B,kBAAMC,6BAQTgB,EAAmBC,gBAAgC,MAEnDb,EAAc,SAACL,OAClBmB,EAAgBnB,EAAhBmB,mBAEJA,EACKC,EAAkBD,GAGvBnB,EAAMqB,SAENpB,gBAACqB,gBACEtB,EAAMqB,SAASE,KAAI,SAACC,EAAOC,UAC1BxB,gBAACyB,iBAAuBC,IAAKF,GAAOD,QAMrC,eAIOJ,EAAkBQ,OAC1BC,EAAyBD,EAAKE,MAAM,cAEjC7B,gBAACqB,gBAD4B,IAAlCO,EAAuBE,OACPH,EAIfC,EAAuBN,KAAI,SAACS,EAAcC,OACnCN,EAAMM,EAAMC,kBACdD,IAAUJ,EAAuBE,OAAS,EACrC9B,gBAACqB,YAASK,IAAKA,WAGtB1B,gBAACqB,YAASK,IAAKA,GACZK,EACD/B,oCAQCyB,EAAyB,SAAC1B,OACjCmC,EAAWrC,EAAUkB,KACnBoB,EAAYC,aAAWpB,GAErBqB,EAA4BtC,EAA5BsC,KAAYnB,EAAgBnB,EAAhBmB,eAEhBmB,IAIFH,SAFiBC,SAAAA,EADPE,KAGaxC,EAAUwC,KAG9BH,KACHA,EAAWrC,EAAUkB,KAER,cAATsB,GAAiC,UAZHtC,EAAtBQ,KAaV2B,EAAWrC,EAAUiB,SAChB,GAAa,OAATuB,GAAiBnB,SACnBC,EAAkBD,UAItBlB,gBAACkC,mBAAanC,gCAGW,oBAAGoC,UAAAA,aAAY,OAAMG,IAAAA,YAChDA,EAIDC,MAAMC,QAAQF,GAGdtC,gBAACgB,EAAiByB,UAASC,MAAOP,GAFTG,EAGhBhB,KAAI,SAACqB,EAAGnB,UACbxB,gBAACyB,iBAAuBC,IAAKF,GAAOmB,QAS1C3C,gBAACgB,EAAiByB,UAASC,MAAOP,GAChCnC,gBAACyB,mBAJmBa,KAdf"}
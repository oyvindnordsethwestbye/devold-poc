{"version":3,"file":"react-video.cjs.production.min.js","sources":["../src/dash.ts","../src/hls.ts","../src/index.tsx"],"sourcesContent":["declare global {\n  interface Window {\n    dashjs: any;\n  }\n}\n\nfunction supportsMediaSource() {\n  let hasWebKit = 'WebKitMediaSource' in window;\n  let hasMediaSource = 'MediaSource' in window;\n\n  return hasWebKit || hasMediaSource;\n}\n\nexport const supportsDash = supportsMediaSource;\n\nlet added = false;\n\nexport function getDash() {\n  return new Promise<any>(resolve => {\n    if (!added) {\n      const hlsCore = document.createElement('script');\n      hlsCore.src = 'https://cdn.dashjs.org/latest/dash.all.min.js';\n      hlsCore.defer = true;\n      document.head.appendChild(hlsCore);\n\n      added = true;\n    }\n\n    (function checkForLibraryExistence() {\n      if ('dashjs' in window) {\n        resolve(window.dashjs);\n      } else {\n        setTimeout(checkForLibraryExistence, 10);\n      }\n    })();\n  });\n}\n","declare global {\n  interface Window {\n    Hls: any;\n  }\n}\n\nlet added = false;\n\nexport function getHls() {\n  return new Promise<any>((resolve) => {\n    if (!added) {\n      const hlsCore = document.createElement('script');\n      hlsCore.src = 'https://cdn.jsdelivr.net/npm/hls.js@latest';\n      hlsCore.defer = true;\n      document.head.appendChild(hlsCore);\n\n      added = true;\n    }\n\n    (function checkForLibraryExistence() {\n      if ('Hls' in window) {\n        resolve(\n          new window.Hls({\n            testBandwidth: false,\n            abrEwmaDefaultEstimate: 1000000,\n            abrMaxWithRealBitrate: true,\n          })\n        );\n      } else {\n        setTimeout(checkForLibraryExistence, 10);\n      }\n    })();\n  });\n}\n","import React, { useState, useEffect, useRef, FC, HTMLAttributes } from 'react';\nimport { Image, CrystallizeImageVariant } from '@crystallize/react-image';\n\nimport { supportsDash, getDash } from './dash';\nimport { getHls } from './hls';\n\ndeclare global {\n  interface navigator {\n    connection: any;\n  }\n}\n\nexport interface Props extends HTMLAttributes<HTMLDivElement> {\n  playlists: string[];\n  thumbnails?: CrystallizeImageVariant[];\n  thumbnailProps?: object;\n  videoProps?: HTMLAttributes<HTMLVideoElement>;\n  autoPlay?: boolean;\n  loop?: boolean;\n  muted?: boolean;\n  controls?: boolean;\n  poster?: string;\n  playButtonText?: string;\n}\n\n/**\n * Fallback function to get a video poster from the list of\n * variants\n */\nfunction getPoster(thumbnails?: any[]): string | undefined {\n  if (thumbnails && thumbnails.length > 0) {\n    const [firstThumbnail] = thumbnails;\n\n    // Check for naive image props\n    if (firstThumbnail._availableSizes && firstThumbnail._availableFormats) {\n      return firstThumbnail.url;\n    }\n\n    const allVariants = firstThumbnail.variants as CrystallizeImageVariant[];\n\n    const variantsNoFancyStuff = allVariants.filter(\n      (v) => !v.url.endsWith('.webp') && !v.url.endsWith('.avif')\n    );\n\n    return (\n      variantsNoFancyStuff\n        .filter((v) => v.width > 500)\n        .sort((a, b) => a.width - b.width)[0].url || variantsNoFancyStuff[0].url\n    );\n  }\n  return undefined;\n}\n\nexport const Video: FC<Props> = ({\n  playlists,\n  thumbnails,\n  thumbnailProps,\n  videoProps,\n  autoPlay,\n  loop = false,\n  muted = false,\n  controls = true,\n  poster,\n  playButtonText = 'Play video',\n  className,\n}) => {\n  const [showThumbnail, setShowThumbnail] = useState(true);\n  const [playVideo, setPlayVideo] = useState(false);\n  const [initiated, setInitiated] = useState(false);\n  const ref = useRef<HTMLVideoElement>(null);\n\n  /**\n   * Determine if we should auto play the video.\n   * We allow for auto play unless the user has opted\n   * in for saving data\n   */\n  useEffect(() => {\n    if (autoPlay) {\n      const connection = (navigator as any).connection;\n      if (!connection || !connection.saveData) {\n        setPlayVideo(true);\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!playVideo) {\n      return;\n    }\n\n    if (initiated) {\n      return;\n    }\n\n    const video = ref.current;\n    if (!video) {\n      throw new Error(\n        'Cannot initialize video. Unable to find the video HTML node'\n      );\n    }\n\n    // Hide the thumbnail when the video has started\n    video.addEventListener('playing', () => setShowThumbnail(false), {\n      once: true,\n    });\n\n    const startWithHighQualityVideo = (function () {\n      try {\n        const connection = (navigator as any).connection;\n        return connection.downlink >= 5 && !connection.saveData;\n      } catch (e) {\n        return false;\n      }\n    })();\n\n    /**\n     * Prioritise m3u8\n     */\n    const m3u8Src = playlists.find((p) => p.endsWith('.m3u8'));\n    if (m3u8Src) {\n      /**\n       * iOS has native support for HLS, and we can use\n       * the m3u8 source directly, without the use of hls.js\n       */\n      if (video.canPlayType('application/vnd.apple.mpegurl')) {\n        video.autoplay = true;\n        video.src = m3u8Src;\n\n        setInitiated(true);\n      } else {\n        getHls().then((hls) => {\n          hls.loadSource(m3u8Src);\n          hls.attachMedia(video);\n\n          hls.on('hlsMediaAttached', function () {\n            video.muted = true;\n            video.play();\n          });\n\n          setInitiated(true);\n        });\n      }\n    } else if (supportsDash()) {\n      getDash().then((dashjs) => {\n        const src = playlists.find((p) => p.endsWith('.mpd'));\n        if (!src) {\n          throw new Error('Cannot find a valid Dash source for video');\n        }\n\n        const player = dashjs.MediaPlayer().create();\n\n        player.initialize();\n\n        player.updateSettings({\n          debug: {\n            logLevel:\n              dashjs.Debug.LOG_LEVEL_NONE /* turns off console logging */,\n          },\n          streaming: {\n            abr: {\n              initialBitrate: {\n                audio: -1,\n                video: startWithHighQualityVideo ? 10000 : -1,\n              },\n              autoSwitchBitrate: { audio: true, video: true },\n            },\n          },\n        });\n        player.setAutoPlay(true);\n        player.attachView(video);\n        player.attachSource(src);\n\n        setInitiated(true);\n      });\n    }\n  }, [playVideo]);\n\n  function onPlayClick(event: any) {\n    event.preventDefault();\n    setPlayVideo(true);\n  }\n\n  const thumbnailStyle = {\n    zIndex: showThumbnail ? 2 : 1,\n    opacity: showThumbnail ? 1 : 0,\n  };\n\n  const posterUrl = poster || getPoster(thumbnails);\n\n  return (\n    <div\n      className={`react-video${className ? ` ${className}` : ''}`}\n      style={{ position: 'relative' }}\n    >\n      {thumbnails && thumbnails.length > 0 ? (\n        <Image\n          {...thumbnails[0]}\n          className=\"react-video__thumbnail\"\n          {...thumbnailProps}\n          style={thumbnailStyle}\n        />\n      ) : (\n        <div\n          className=\"react-video__thumbnail-placeholder\"\n          style={thumbnailStyle}\n        />\n      )}\n      {!playVideo && (\n        <button className=\"react-video__play-btn\" onClick={onPlayClick}>\n          {playButtonText}\n          <svg viewBox=\"0 0 100 100\" className=\"react-video__play-icon\">\n            <path d=\"M78.158 51.843L25.842 82.048c-1.418.819-3.191-.205-3.191-1.843v-60.41c0-1.638 1.773-2.661 3.191-1.843l52.317 30.205c1.418.819 1.418 2.867-.001 3.686z\" />\n          </svg>\n        </button>\n      )}\n      <video\n        className=\"react-video__video\"\n        ref={ref}\n        controls={controls}\n        playsInline\n        muted={muted}\n        loop={loop}\n        poster={posterUrl}\n        style={{ opacity: initiated ? 1 : 0, zIndex: showThumbnail ? 1 : 2 }}\n        {...videoProps}\n      />\n    </div>\n  );\n};\n"],"names":["added","playlists","thumbnails","thumbnailProps","videoProps","autoPlay","loop","muted","controls","poster","playButtonText","className","useState","showThumbnail","setShowThumbnail","playVideo","setPlayVideo","initiated","setInitiated","ref","useRef","useEffect","connection","navigator","saveData","video","current","Error","addEventListener","once","startWithHighQualityVideo","downlink","e","m3u8Src","find","p","endsWith","canPlayType","autoplay","src","Promise","resolve","hlsCore","document","createElement","defer","head","appendChild","checkForLibraryExistence","window","Hls","testBandwidth","abrEwmaDefaultEstimate","abrMaxWithRealBitrate","setTimeout","then","hls","loadSource","attachMedia","on","play","hasWebKit","hasMediaSource","dashjs","player","MediaPlayer","create","initialize","updateSettings","debug","logLevel","Debug","LOG_LEVEL_NONE","streaming","abr","initialBitrate","audio","autoSwitchBitrate","setAutoPlay","attachView","attachSource","thumbnailStyle","zIndex","opacity","posterUrl","length","firstThumbnail","_availableSizes","_availableFormats","url","variantsNoFancyStuff","variants","filter","v","width","sort","a","b","getPoster","React","style","position","Image","onClick","event","preventDefault","viewBox","d","playsInline"],"mappings":"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"}
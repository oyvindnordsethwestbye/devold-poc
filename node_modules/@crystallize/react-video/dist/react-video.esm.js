import React, { useState, useRef, useEffect } from 'react';
import { Image } from '@crystallize/react-image';

function supportsMediaSource() {
  var hasWebKit = ('WebKitMediaSource' in window);
  var hasMediaSource = ('MediaSource' in window);
  return hasWebKit || hasMediaSource;
}

var supportsDash = supportsMediaSource;
var added = false;
function getDash() {
  return new Promise(function (resolve) {
    if (!added) {
      var hlsCore = document.createElement('script');
      hlsCore.src = 'https://cdn.dashjs.org/latest/dash.all.min.js';
      hlsCore.defer = true;
      document.head.appendChild(hlsCore);
      added = true;
    }

    (function checkForLibraryExistence() {
      if ('dashjs' in window) {
        resolve(window.dashjs);
      } else {
        setTimeout(checkForLibraryExistence, 10);
      }
    })();
  });
}

var added$1 = false;
function getHls() {
  return new Promise(function (resolve) {
    if (!added$1) {
      var hlsCore = document.createElement('script');
      hlsCore.src = 'https://cdn.jsdelivr.net/npm/hls.js@latest';
      hlsCore.defer = true;
      document.head.appendChild(hlsCore);
      added$1 = true;
    }

    (function checkForLibraryExistence() {
      if ('Hls' in window) {
        resolve(new window.Hls({
          testBandwidth: false,
          abrEwmaDefaultEstimate: 1000000,
          abrMaxWithRealBitrate: true
        }));
      } else {
        setTimeout(checkForLibraryExistence, 10);
      }
    })();
  });
}

/**
 * Fallback function to get a video poster from the list of
 * variants
 */

function getPoster(thumbnails) {
  if (thumbnails && thumbnails.length > 0) {
    var firstThumbnail = thumbnails[0]; // Check for naive image props

    if (firstThumbnail._availableSizes && firstThumbnail._availableFormats) {
      return firstThumbnail.url;
    }

    var allVariants = firstThumbnail.variants;
    var variantsNoFancyStuff = allVariants.filter(function (v) {
      return !v.url.endsWith('.webp') && !v.url.endsWith('.avif');
    });
    return variantsNoFancyStuff.filter(function (v) {
      return v.width > 500;
    }).sort(function (a, b) {
      return a.width - b.width;
    })[0].url || variantsNoFancyStuff[0].url;
  }

  return undefined;
}

var Video = function Video(_ref) {
  var playlists = _ref.playlists,
      thumbnails = _ref.thumbnails,
      thumbnailProps = _ref.thumbnailProps,
      videoProps = _ref.videoProps,
      autoPlay = _ref.autoPlay,
      _ref$loop = _ref.loop,
      loop = _ref$loop === void 0 ? false : _ref$loop,
      _ref$muted = _ref.muted,
      muted = _ref$muted === void 0 ? false : _ref$muted,
      _ref$controls = _ref.controls,
      controls = _ref$controls === void 0 ? true : _ref$controls,
      poster = _ref.poster,
      _ref$playButtonText = _ref.playButtonText,
      playButtonText = _ref$playButtonText === void 0 ? 'Play video' : _ref$playButtonText,
      className = _ref.className;

  var _useState = useState(true),
      showThumbnail = _useState[0],
      setShowThumbnail = _useState[1];

  var _useState2 = useState(false),
      playVideo = _useState2[0],
      setPlayVideo = _useState2[1];

  var _useState3 = useState(false),
      initiated = _useState3[0],
      setInitiated = _useState3[1];

  var ref = useRef(null);
  /**
   * Determine if we should auto play the video.
   * We allow for auto play unless the user has opted
   * in for saving data
   */

  useEffect(function () {
    if (autoPlay) {
      var connection = navigator.connection;

      if (!connection || !connection.saveData) {
        setPlayVideo(true);
      }
    }
  }, []);
  useEffect(function () {
    if (!playVideo) {
      return;
    }

    if (initiated) {
      return;
    }

    var video = ref.current;

    if (!video) {
      throw new Error('Cannot initialize video. Unable to find the video HTML node');
    } // Hide the thumbnail when the video has started


    video.addEventListener('playing', function () {
      return setShowThumbnail(false);
    }, {
      once: true
    });

    var startWithHighQualityVideo = function () {
      try {
        var connection = navigator.connection;
        return connection.downlink >= 5 && !connection.saveData;
      } catch (e) {
        return false;
      }
    }();
    /**
     * Prioritise m3u8
     */


    var m3u8Src = playlists.find(function (p) {
      return p.endsWith('.m3u8');
    });

    if (m3u8Src) {
      /**
       * iOS has native support for HLS, and we can use
       * the m3u8 source directly, without the use of hls.js
       */
      if (video.canPlayType('application/vnd.apple.mpegurl')) {
        video.autoplay = true;
        video.src = m3u8Src;
        setInitiated(true);
      } else {
        getHls().then(function (hls) {
          hls.loadSource(m3u8Src);
          hls.attachMedia(video);
          hls.on('hlsMediaAttached', function () {
            video.muted = true;
            video.play();
          });
          setInitiated(true);
        });
      }
    } else if (supportsDash()) {
      getDash().then(function (dashjs) {
        var src = playlists.find(function (p) {
          return p.endsWith('.mpd');
        });

        if (!src) {
          throw new Error('Cannot find a valid Dash source for video');
        }

        var player = dashjs.MediaPlayer().create();
        player.initialize();
        player.updateSettings({
          debug: {
            logLevel: dashjs.Debug.LOG_LEVEL_NONE
            /* turns off console logging */

          },
          streaming: {
            abr: {
              initialBitrate: {
                audio: -1,
                video: startWithHighQualityVideo ? 10000 : -1
              },
              autoSwitchBitrate: {
                audio: true,
                video: true
              }
            }
          }
        });
        player.setAutoPlay(true);
        player.attachView(video);
        player.attachSource(src);
        setInitiated(true);
      });
    }
  }, [playVideo]);

  function onPlayClick(event) {
    event.preventDefault();
    setPlayVideo(true);
  }

  var thumbnailStyle = {
    zIndex: showThumbnail ? 2 : 1,
    opacity: showThumbnail ? 1 : 0
  };
  var posterUrl = poster || getPoster(thumbnails);
  return React.createElement("div", {
    className: "react-video" + (className ? " " + className : ''),
    style: {
      position: 'relative'
    }
  }, thumbnails && thumbnails.length > 0 ? React.createElement(Image, Object.assign({}, thumbnails[0], {
    className: "react-video__thumbnail"
  }, thumbnailProps, {
    style: thumbnailStyle
  })) : React.createElement("div", {
    className: "react-video__thumbnail-placeholder",
    style: thumbnailStyle
  }), !playVideo && React.createElement("button", {
    className: "react-video__play-btn",
    onClick: onPlayClick
  }, playButtonText, React.createElement("svg", {
    viewBox: "0 0 100 100",
    className: "react-video__play-icon"
  }, React.createElement("path", {
    d: "M78.158 51.843L25.842 82.048c-1.418.819-3.191-.205-3.191-1.843v-60.41c0-1.638 1.773-2.661 3.191-1.843l52.317 30.205c1.418.819 1.418 2.867-.001 3.686z"
  }))), React.createElement("video", Object.assign({
    className: "react-video__video",
    ref: ref,
    controls: controls,
    playsInline: true,
    muted: muted,
    loop: loop,
    poster: posterUrl,
    style: {
      opacity: initiated ? 1 : 0,
      zIndex: showThumbnail ? 1 : 2
    }
  }, videoProps)));
};

export { Video };
//# sourceMappingURL=react-video.esm.js.map
